import zipfile
import os

from google.colab import files
uploaded = files.upload()

for filename in uploaded.keys():
  with zipfile.ZipFile(filename, 'r') as zip_ref:
    zip_ref.extractall('cell_images')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

img_height, img_width = 150, 150
batch_size = 32

train_datagen = ImageDataGenerator(
rescale=1./255,
rotation_range=20,
zoom_range=0.2,
horizontal_flip=True,
validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
'cell_images',
target_size=(img_height, img_width),
batch_size=batch_size,
class_mode='categorical',
subset='training'
)

val_generator = train_datagen.flow_from_directory(
'cell_images',
target_size=(img_height, img_width),
batch_size=batch_size,
class_mode='categorical',
subset='validation'
)

from tensorflow.keras import layers, models

model = models.Sequential([
layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),
layers.MaxPooling2D(2, 2),
layers.Conv2D(64, (3, 3), activation='relu'),
layers.MaxPooling2D(2, 2),
layers.Conv2D(128, (3, 3), activation='relu'),
layers.MaxPooling2D(2, 2),
layers.Flatten(),
layers.Dense(128, activation='relu'),
layers.Dense(train_generator.num_classes, activation='softmax')
])

model.compile(optimizer='adam',
loss='categorical_crossentropy',
metrics=['accuracy'])

history = model.fit(
train_generator,
epochs=10,
validation_data=val_generator
)

import.pyplot as plt

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title('Accuracy over Epochs')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss over Epochs')
plt.legend()
plt.show()

import numpy as np

val_generator.reset()
x_batch, y_batch = next(val_generator)
preds = model.predict(x_batch)
pred_classes = np.argmax(preds, axis=1)
true_classes = np.argmax(y_batch, axis=1)
class_names = list(val_generator.class_indices.keys())

plt.figure(figsize=(15, 5))
for i in range(5):
plt.subplot(1, 5, i+1)
plt.imshow(x_batch[i])
plt.title(f\"True: {class_names[true_classes[i]]}\\nPred: {class_names[pred_classes[i]]}\")
plt.axis('off')
plt.show()
